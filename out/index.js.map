{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import Puzzle from './model/Puzzle';\n\n/**\n * Solves the giben puzzle\n * @param puzzle The puzzle to solve\n */\nexport function solvePuzzle(puzzle: Puzzle) {\n  puzzle.validate();\n\n  const start = Date.now();\n  const tryToSolve = (current: Puzzle): Puzzle => {\n    const { complete, leastPossible } = current.fill();\n\n    if (complete) { return current; }\n\n    for (const value of leastPossible.possibleValues) {\n      const guess = current.clone();\n      guess.fillField(leastPossible.index, value);\n\n      try {\n        return tryToSolve(guess);\n      } catch (err) {\n        // Doesn't work, try next value\n      }\n    }\n\n    throw new Error('Unable to solve puzzle');\n  };\n\n  puzzle.insertValues(tryToSolve(puzzle));\n\n  return {\n    duration: Date.now() - start,\n  };\n}\n"],"names":["solvePuzzle","puzzle","validate","start","Date","now","tryToSolve","current","complete","leastPossible","fill","value","possibleValues","guess","clone","fillField","index","err","Error","insertValues","duration"],"mappings":";;;;AAEA;;;;AAIA,AAAO,SAASA,WAAT,CAAqBC,MAArB,EAAqC;EAC1CA,MAAM,CAACC,QAAP;QAEMC,KAAK,GAAGC,IAAI,CAACC,GAAL,EAAd;;QACMC,UAAU,GAAIC,OAAD,IAA6B;UACxC;MAAEC,QAAF;MAAYC;QAAkBF,OAAO,CAACG,IAAR,EAApC;;QAEIF,QAAJ,EAAc;aAASD,OAAP;;;SAEX,MAAMI,KAAX,IAAoBF,aAAa,CAACG,cAAlC,EAAkD;YAC1CC,KAAK,GAAGN,OAAO,CAACO,KAAR,EAAd;MACAD,KAAK,CAACE,SAAN,CAAgBN,aAAa,CAACO,KAA9B,EAAqCL,KAArC;;UAEI;eACKL,UAAU,CAACO,KAAD,CAAjB;OADF,CAEE,OAAOI,GAAP,EAAY;;;;UAKV,IAAIC,KAAJ,CAAU,wBAAV,CAAN;GAhBF;;EAmBAjB,MAAM,CAACkB,YAAP,CAAoBb,UAAU,CAACL,MAAD,CAA9B;SAEO;IACLmB,QAAQ,EAAEhB,IAAI,CAACC,GAAL,KAAaF;GADzB;;;;;"}